<!DOCTYPE html>
<html>
<head>
    <title>Snake Game</title>
    <style>
        body {
            background-color: #000; /* Dark background for a vintage look */
            color: #fff; /* White text for contrast */
            font-family: 'Press Start 2P', cursive; /* Retro pixelated font */
            text-align: center;
            margin: 0;
            overflow: hidden; /* Prevent scrolling */
        }
        #gameContainer {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh; /* Full viewport height */
        }
        canvas {
            border: 10px solid #00FF00; /* Green border for vintage look */
            background-color: #000; /* Black background for canvas */
            display: block;
            margin: 20px auto; /* Center canvas */
        }
        /* Modal styles */
        #gameOverModal {
            display: none; 
            position: fixed; 
            z-index: 1; 
            left: 0;
            top: 0;
            width: 100%; 
            height: 100%; 
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.85); /* Semi-transparent black */
            padding-top: 60px;
        }
        #modalContent {
            background-color: #111; /* Dark background for modal */
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 300px;
            text-align: center;
            color: #fff; /* White text for contrast */
        }
        #modalContent button {
            padding: 10px 20px;
            background-color: #00FF00; /* Green background */
            color: #000; /* Black text */
            border: none;
            cursor: pointer;
            margin-top: 20px;
            font-family: 'Press Start 2P', cursive; /* Retro pixelated font */
        }
        #modalContent button:hover {
            background-color: #00cc00; /* Darker green on hover */
        }
        /* Button styles */
        #controlButtons {
            text-align: center;
            margin-top: 20px;
        }
        #controlButtons button {
            padding: 10px 20px;
            margin: 0 5px;
            background-color: #00FF00; /* Green background */
            color: #000; /* Black text */
            border: none;
            cursor: pointer;
            font-family: 'Press Start 2P', cursive; /* Retro pixelated font */
        }
        #controlButtons button:hover {
            background-color: #00cc00; /* Darker green on hover */
        }
        /* Font import */
        @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        <div id="controlButtons">
            <button id="pauseButton">Pause</button>
            <button id="resumeButton">Resume</button>
        </div>
    </div>
    <div id="gameOverModal">
        <div id="modalContent">
            <h2>Game Over!</h2>
            <p>Your score is <span id="scoreDisplay"></span></p>
            <button id="reloadButton">Play Again</button>
        </div>
    </div>
    <script>
        class GameObject {
    constructor(x, y, color, scale) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.scale = scale;
    }

    draw(ctx) {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.scale, this.scale);
    }
}

class Snake extends GameObject {
    constructor(x, y, scale) {
        super(x, y, 'green', scale);
        this.body = [{ x, y }];
        this.direction = 'right';
    }

    draw(ctx) {
        ctx.fillStyle = this.color;
        this.body.forEach(segment => ctx.fillRect(segment.x, segment.y, this.scale, this.scale));
    }

    move() {
        const head = { ...this.body[0] };
        switch (this.direction) {
            case 'right': head.x += this.scale; break;
            case 'left': head.x -= this.scale; break;
            case 'up': head.y -= this.scale; break;
            case 'down': head.y += this.scale; break;
        }
        this.body.unshift(head);
        if (!this.growing) this.body.pop();
        this.growing = false;
    }

    grow() {
        this.growing = true;
    }

    checkCollision(width, height) {
        const head = this.body[0];
        return head.x < 0 || head.x >= width || head.y < 0 || head.y >= height ||
               this.body.slice(1).some(segment => segment.x === head.x && segment.y === head.y);
    }
}

class CatchSnake extends GameObject {
    constructor(x, y, direction, scale) {
        super(x, y, 'blue', scale);
        this.direction = direction;
    }

    move() {
        switch (this.direction) {
            case 'right': this.x += this.scale; break;
            case 'left': this.x -= this.scale; break;
            case 'up': this.y -= this.scale; break;
            case 'down': this.y += this.scale; break;
        }
    }
}

class Food extends GameObject {
    constructor(x, y, scale) {
        super(x, y, 'red', scale);
    }

    respawn(columns, rows) {
        this.x = Math.floor(Math.random() * columns) * this.scale;
        this.y = Math.floor(Math.random() * rows) * this.scale;
    }
}

class Obstacle extends GameObject {
    constructor(x, y, scale) {
        super(x, y, 'pink', scale);
    }
}

class Game {
    constructor(canvasId) {
        this.canvas = document.getElementById(canvasId);
        this.ctx = this.canvas.getContext('2d');
        this.scale = 10;
        this.snake = new Snake(0, 0, this.scale);
        this.catchSnake = null;
        this.food = new Food(0, 0, this.scale);
        this.obstacles = [];
        this.score = 0;
        this.delay = 200;
        this.gamePaused = false;

        this.resizeCanvas();
        window.addEventListener('resize', () => this.resizeCanvas());
        document.addEventListener('keydown', (event) => this.handleInput(event));
    }

    resizeCanvas() {
        this.canvas.width = window.innerWidth - 40;
        this.canvas.height = window.innerHeight - 200;
        this.columns = Math.floor(this.canvas.width / this.scale);
        this.rows = Math.floor(this.canvas.height / this.scale);
    }

    spawnCatchSnake() {
        const directions = ['right', 'left', 'up', 'down'];
        const direction = directions[Math.floor(Math.random() * directions.length)];
        let x, y;
        switch (direction) {
            case 'right': x = 0; y = Math.floor(Math.random() * this.rows) * this.scale; break;
            case 'left': x = this.canvas.width - this.scale; y = Math.floor(Math.random() * this.rows) * this.scale; break;
            case 'up': x = Math.floor(Math.random() * this.columns) * this.scale; y = this.canvas.height - this.scale; break;
            case 'down': x = Math.floor(Math.random() * this.columns) * this.scale; y = 0; break;
        }
        this.catchSnake = new CatchSnake(x, y, direction, this.scale);
    }

    spawnObstacle() {
        const x = Math.floor(Math.random() * this.columns) * this.scale;
        const y = Math.floor(Math.random() * this.rows) * this.scale;
        this.obstacles.push(new Obstacle(x, y, this.scale));
    }

    start() {
        this.snake = new Snake(Math.floor(Math.random() * this.columns) * this.scale, 
                               Math.floor(Math.random() * this.rows) * this.scale, this.scale);
        this.food.respawn(this.columns, this.rows);
        this.spawnCatchSnake();
        this.gameLoop();
    }

    gameLoop() {
        if (this.gamePaused) return;

        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.fillStyle = 'black';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        this.snake.move();
        this.catchSnake.move();

        this.snake.draw(this.ctx);
        this.catchSnake.draw(this.ctx);
        this.food.draw(this.ctx);
        this.obstacles.forEach(obstacle => obstacle.draw(this.ctx));

        if (this.checkCollisions()) {
            this.gameOver();
            return;
        }

        if (this.snake.body[0].x === this.food.x && this.snake.body[0].y === this.food.y) {
            this.snake.grow();
            this.food.respawn(this.columns, this.rows);
            this.score++;
            if (this.score % 2 === 0) {
                this.delay = Math.max(50, this.delay - 5);
            }
        }

        if (this.catchSnake.x < 0 || this.catchSnake.y < 0 || 
            this.catchSnake.x >= this.canvas.width || this.catchSnake.y >= this.canvas.height) {
            this.spawnCatchSnake();
            this.spawnObstacle();
        }

        setTimeout(() => this.gameLoop(), this.delay);
    }

    handleInput(event) {
        switch (event.key) {
            case 'ArrowRight': if (this.snake.direction !== 'left') this.snake.direction = 'right'; break;
            case 'ArrowLeft': if (this.snake.direction !== 'right') this.snake.direction = 'left'; break;
            case 'ArrowUp': if (this.snake.direction !== 'down') this.snake.direction = 'up'; break;
            case 'ArrowDown': if (this.snake.direction !== 'up') this.snake.direction = 'down'; break;
            case 'p': this.togglePause(); break;
        }
    }

    togglePause() {
        this.gamePaused = !this.gamePaused;
        if (!this.gamePaused) this.gameLoop();
    }

    checkCollisions() {
        return this.snake.checkCollision(this.canvas.width, this.canvas.height) ||
               this.snake.body.some(segment => segment.x === this.catchSnake.x && segment.y === this.catchSnake.y) ||
               this.obstacles.some(obstacle => this.snake.body.some(segment => segment.x === obstacle.x && segment.y === obstacle.y));
    }

    gameOver() {
        document.getElementById('scoreDisplay').innerText = this.score;
        document.getElementById('gameOverModal').style.display = 'block';
    }
}

// Usage
const game = new Game('gameCanvas');
game.start();

// Event listeners for UI buttons
document.getElementById('pauseButton').onclick = () => game.togglePause();
document.getElementById('resumeButton').onclick = () => { game.gamePaused = false; game.gameLoop(); };
document.getElementById('reloadButton').onclick = () => location.reload();
    </script>
</body>
</html>
